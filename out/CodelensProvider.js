"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodelensProvider = void 0;
const axios_1 = require("axios");
const vscode = require("vscode");
/**
 * CodelensProvider
 */
class CodelensProvider {
    constructor() {
        this.codeLenses = [];
        this._onDidChangeCodeLenses = new vscode.EventEmitter();
        this.onDidChangeCodeLenses = this._onDidChangeCodeLenses.event;
        this.regex = /(class\s+(\w+)\s*(?::\s*(?:public|private|protected)\s+(\w+)\s*)*(?:\{|$))|(\w+\s+\w+\s*\([^)]*\)\s*(?:const)?\s*(?={))/g;
        /*/(.+)/g;*/
        vscode.workspace.onDidChangeConfiguration((_) => {
            this._onDidChangeCodeLenses.fire();
        });
    }
    async provideCodeLenses(document, token) {
        if (vscode.workspace.getConfiguration("codelens-sample").get("enableCodeLens", true)) {
            this.codeLenses = [];
            const regex = new RegExp(this.regex);
            const text = document.getText();
            let matches;
            while ((matches = regex.exec(text)) !== null) {
                const line = document.lineAt(document.positionAt(matches.index).line);
                const indexOf = line.text.indexOf(matches[0]);
                const position = new vscode.Position(line.lineNumber, indexOf);
                const range = document.getWordRangeAtPosition(position, new RegExp(this.regex));
                if (range) {
                    const summary = await this.generateSummary(matches[0]);
                    const codeLens = new vscode.CodeLens(range, {
                        title: summary,
                        tooltip: "Summary generated by ChatGPT",
                        command: ""
                    });
                    this.codeLenses.push(codeLens);
                }
            }
            return this.codeLenses;
        }
        return [];
    }
    resolveCodeLens(codeLens, token) {
        if (vscode.workspace.getConfiguration("codelens-sample").get("enableCodeLens", true)) {
            codeLens.command = {
                title: "Codelens provided by sample extension",
                tooltip: "Tooltip provided by sample extension",
                command: "codelens-sample.codelensAction",
                arguments: ["Argument 1", false]
            };
            return codeLens;
        }
        return null;
    }
    async generateSummary(code) {
        const apiKey = process.env.OPENAI_API_KEY;
        const response = await axios_1.default.post('https://api.openai.com/v1/engines/davinci-codex/completions', {
            prompt: `summarize code: ${code}`,
            max_tokens: 64,
            n: 1,
            stop: ['\n'],
        }, {
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`,
            },
        });
        return response.data.choices[0].text.trim();
    }
}
exports.CodelensProvider = CodelensProvider;
//# sourceMappingURL=CodelensProvider.js.map