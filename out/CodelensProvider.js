"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodelensProvider = void 0;
const vscode = require("vscode");
const openai_1 = require("openai");
// OpenAIApi required config
const configuration = new openai_1.Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});
// OpenAIApi initialization
const openai = new openai_1.OpenAIApi(configuration);
/**
 * CodelensProvider
 */
class CodelensProvider {
    constructor() {
        //this.regex=/(class\s+(\w+)\s*(?::\s*(?:public|private|protected)\s+(\w+)\s*)*(?:\{|$))|(\w+\s+\w+\s*\([^)]*\)\s*(?:const)?\s*(?={))/g;
        this.codeLenses = [];
        this._onDidChangeCodeLenses = new vscode.EventEmitter();
        this.onDidChangeCodeLenses = this._onDidChangeCodeLenses.event;
        //this.regex =  /(class\s+[a-zA-Z0-9_]+\s*\{)([\s\S]*)\}/g;
        this.regex = /class\s+(\w+)\s*\{((?:[^{}]*|\{(?:[^{}]*|\{(?:[^{}]*|\{[^{}]*\})*\})*\})*)\}/g;
        vscode.workspace.onDidChangeConfiguration((_) => {
            this._onDidChangeCodeLenses.fire();
        });
    }
    async provideCodeLenses(document, token) {
        if (vscode.workspace.getConfiguration("codelens-sample").get("enableCodeLens", true)) {
            this.codeLenses = [];
            const regex = new RegExp(this.regex);
            const text = document.getText();
            let matches;
            while ((matches = regex.exec(text)) !== null) {
                const { line, character } = document.positionAt(matches.index);
                const position = new vscode.Position(line, character);
                const range = document.getWordRangeAtPosition(position);
                if (range) {
                    const codeLens = new vscode.CodeLens(range, {
                        title: "show summary",
                        tooltip: "Summary generated by ChatGPT",
                        command: "codelens-sample.showSummary",
                        //arguments: [await this.generateSummary(matches[0])]
                        arguments: [matches[0]]
                    });
                    this.codeLenses.push(codeLens);
                }
            }
            return this.codeLenses;
        }
        return [];
    }
}
exports.CodelensProvider = CodelensProvider;
// Register command handler for the CodeLens command
vscode.commands.registerCommand("codelens-sample.showSummary", async (payload) => {
    const summary = await generateSummary(payload);
    //vscode.window.showInformationMessage(summary);
    const panel = vscode.window.createWebviewPanel("summaryPanel", "Summary", vscode.ViewColumn.Two, {});
    panel.webview.html = summary;
});
async function generateSummary(code) {
    try {
        const prompt = `summarize code: ${code}`;
        const completions = await openai.createCompletion({
            model: 'text-davinci-003',
            prompt: prompt,
            max_tokens: 64,
            n: 1,
        });
        const summary = completions.data.choices[0].text.trim();
        return `${code}\n\nSummary: ${summary}`;
    }
    catch (error) {
        console.error(`OpenAI API error: ${error}`);
        throw new Error(`Failed to generate summary: ${error}`);
    }
}
//# sourceMappingURL=CodelensProvider.js.map